# (www.)twolfson.com: HTTP -> HTTPS
server {
  # Listen for HTTP traffic
  listen 0.0.0.0:80; listen [::]:80;
  server_name twolfson.com;
  server_name www.twolfson.com;

  if ($host = twolfson.com) {
    return 301 https://$host$request_uri;
  } # managed by Certbot
  if ($host = www.twolfson.com) {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  return 404; # managed by Certbot
}

# HTTPS: www.twolfson.com -> twolfson.com
server {
  # Listen for HTTPS traffic
  # DEV: We must explicitly use `[::]:443` for IPv6 support
  #   Everything is for consistency and being explicit
  listen 0.0.0.0:443 ssl; listen [::]:443 ssl;
  server_name www.twolfson.com;

  # Set up SSL certificates
  ssl_certificate /etc/letsencrypt/live/twolfson.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/twolfson.com/privkey.pem; # managed by Certbot

  # Redirect traffic to naked domain (twolfson.com)
  #   http://www.twolfson.com/hello -> http://twolfson.com/hello
  #   https://www.twolfson.com/world -> https://twolfson.com/world
  return 301 $scheme://twolfson.com$request_uri;
}

# HTTPS: twolfson.com -> localhost:8080
server {
  # Listen for HTTPS traffic
  listen 0.0.0.0:443 ssl; listen [::]:443 ssl;
  server_name twolfson.com;

  # Set up server specific logs
  access_log /var/log/nginx/twolfson.com.access.log;
  error_log /var/log/nginx/twolfson.com.error.log;

  # Set up SSL certificates
  ssl_certificate /etc/letsencrypt/live/twolfson.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/twolfson.com/privkey.pem; # managed by Certbot

  # Add heades for internal network
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;

  # Perform reverse proxy to localhost:8080
  location / {
    proxy_pass http://localhost:8080;
  }
}
